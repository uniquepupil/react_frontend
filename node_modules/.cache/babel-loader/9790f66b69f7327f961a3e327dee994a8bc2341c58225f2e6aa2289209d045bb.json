{"ast":null,"code":"var _jsxFileName = \"/Users/parikshit/Desktop/untitled folder/my-react-website/src/LoginSignup.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for redirect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginSignup = () => {\n  _s();\n  const navigate = useNavigate(); // Hook for navigation\n  const [isSignup, setIsSignup] = useState(false);\n  const submitLoginForm = () => {\n    const username = document.getElementById('login-username').value;\n    const password = document.getElementById('login-password').value;\n    const data = {\n      username,\n      password\n    };\n    fetch('http://127.0.0.1:8000/auth/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      if (data.message === 'Login successful') {\n        // Redirect to the main page upon successful login\n        navigate('/main');\n      } else {\n        alert('Login failed: ' + (data.error || 'Unknown error'));\n      }\n    }).catch(error => {\n      alert('Error: ' + error);\n    });\n  };\n  const submitSignupForm = () => {\n    const username = document.getElementById('signup-username').value;\n    const phone = document.getElementById('signup-phone').value;\n    const email = document.getElementById('signup-email').value;\n    const password1 = document.getElementById('signup-password1').value;\n    const password2 = document.getElementById('signup-password2').value;\n    if (password1 !== password2) {\n      alert(\"Passwords don't match!\");\n      return;\n    }\n    const data = {\n      username,\n      phone,\n      email,\n      password1,\n      password2\n    };\n    fetch('http://127.0.0.1:8000/auth/signup/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      if (data.message === 'User created successfully!') {\n        alert('Signup successful! You can now log in.');\n        setIsSignup(false); // Switch to login form after successful signup\n      } else {\n        alert('Signup failed: ' + data.errors);\n      }\n    }).catch(error => {\n      alert('Error: ' + error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginSignup, \"+XqiP8TBRQGZsMWCGagBAvaw1HA=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginSignup;\nexport default LoginSignup;\nvar _c;\n$RefreshReg$(_c, \"LoginSignup\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","LoginSignup","_s","navigate","isSignup","setIsSignup","submitLoginForm","username","document","getElementById","value","password","data","fetch","method","headers","body","JSON","stringify","then","response","json","message","alert","error","catch","submitSignupForm","phone","email","password1","password2","errors","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parikshit/Desktop/untitled folder/my-react-website/src/LoginSignup.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for redirect\n\nconst LoginSignup = () => {\n  const navigate = useNavigate(); // Hook for navigation\n  const [isSignup, setIsSignup] = useState(false);\n\n  const submitLoginForm = () => {\n    const username = document.getElementById('login-username').value;\n    const password = document.getElementById('login-password').value;\n\n    const data = {\n      username,\n      password,\n    };\n\n    fetch('http://127.0.0.1:8000/auth/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.message === 'Login successful') {\n          // Redirect to the main page upon successful login\n          navigate('/main');\n        } else {\n          alert('Login failed: ' + (data.error || 'Unknown error'));\n        }\n      })\n      .catch((error) => {\n        alert('Error: ' + error);\n      });\n  };\n\n  const submitSignupForm = () => {\n    const username = document.getElementById('signup-username').value;\n    const phone = document.getElementById('signup-phone').value;\n    const email = document.getElementById('signup-email').value;\n    const password1 = document.getElementById('signup-password1').value;\n    const password2 = document.getElementById('signup-password2').value;\n\n    if (password1 !== password2) {\n      alert(\"Passwords don't match!\");\n      return;\n    }\n\n    const data = {\n      username,\n      phone,\n      email,\n      password1,\n      password2,\n    };\n\n    fetch('http://127.0.0.1:8000/auth/signup/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.message === 'User created successfully!') {\n          alert('Signup successful! You can now log in.');\n          setIsSignup(false); // Switch to login form after successful signup\n        } else {\n          alert('Signup failed: ' + data.errors);\n        }\n      })\n      .catch((error) => {\n        alert('Error: ' + error);\n      });\n  };\n\n  return (\n    <div>\n        hello\n      {/* Your Login/Signup form logic goes here */}\n    </div>\n  );\n};\n\nexport default LoginSignup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}